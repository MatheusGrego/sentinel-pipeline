package com.teteu.analysis_service.infraestructure.adapter.in.web;

import com.teteu.analysis_service.application.port.in.QueryImageAnalysisUseCase;
import com.teteu.analysis_service.domain.exception.ImageAnalysisException;
import com.teteu.analysis_service.domain.exception.ImageNotFoundException;
import com.teteu.analysis_service.domain.model.ImageAnalysis;
import com.teteu.analysis_service.domain.model.enums.AnalysisStatus;
import com.teteu.analysis_service.infraestructure.adapter.in.web.constants.ApiConstants;
import com.teteu.analysis_service.infraestructure.adapter.in.web.dto.AnalysisListResponse;
import com.teteu.analysis_service.infraestructure.adapter.in.web.dto.AnalysisStatsResponse;
import com.teteu.analysis_service.infraestructure.adapter.in.web.dto.ErrorResponse;
import com.teteu.analysis_service.infraestructure.adapter.in.web.dto.ImageAnalysisResponse;
import com.teteu.analysis_service.infraestructure.adapter.in.web.mapper.ImageAnalysisResponseMapper;
import com.teteu.analysis_service.infraestructure.adapter.in.web.swagger.annotations.ApiAnalysisResponses;
import com.teteu.analysis_service.infraestructure.adapter.in.web.swagger.annotations.SuccessResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping(ApiConstants.ANALYSIS_PATH)
@RequiredArgsConstructor
@Slf4j
@Validated
@Tag(name = "An√°lise de Imagens", description = "API para consulta de an√°lises de imagens de sat√©lite")
@ApiAnalysisResponses
public class ImageAnalysisController {

    private final QueryImageAnalysisUseCase queryUseCase;
    private final ImageAnalysisResponseMapper responseMapper;

    @Operation(summary = "üîç Buscar an√°lise por ID",
            description = "Retorna os detalhes completos de uma an√°lise espec√≠fica")
    @SuccessResponse(ImageAnalysisResponse.class)
    @GetMapping("/{id}")
    public ResponseEntity<ImageAnalysisResponse> getAnalysisById(
            @Parameter(description = "ID √∫nico da an√°lise", required = true, example = "550e8400-e29b-41d4-a716-446655440000")
            @PathVariable String id) {

        log.info("üîç Buscando an√°lise por ID: {}", id);

        validateId(id);

        Optional<ImageAnalysis> analysis = queryUseCase.findById(id);

        if (analysis.isPresent()) {
            ImageAnalysisResponse response = responseMapper.toResponse(analysis.get());
            log.info("‚úÖ An√°lise encontrada: {} - Status: {}", id, response.getStatus());
            return ResponseEntity.ok(response);
        } else {
            log.warn("‚ùå An√°lise n√£o encontrada: {}", id);
            return ResponseEntity.notFound().build();
        }
    }

    @Operation(summary = "üñºÔ∏è Buscar an√°lise por ID da imagem",
            description = "Retorna a an√°lise associada a uma imagem espec√≠fica")
    @SuccessResponse(ImageAnalysisResponse.class)
    @GetMapping("/by-image/{imageId}")
    public ResponseEntity<ImageAnalysisResponse> getAnalysisByImageId(
            @Parameter(description = "ID da imagem", required = true, example = "img_123456789")
            @PathVariable String imageId) {

        log.info("üîç Buscando an√°lise por imageId: {}", imageId);

        validateId(imageId);

        Optional<ImageAnalysis> analysis = queryUseCase.findByImageId(imageId);

        if (analysis.isPresent()) {
            ImageAnalysisResponse response = responseMapper.toResponse(analysis.get());
            log.info("‚úÖ An√°lise encontrada para imagem: {} - ID da an√°lise: {}",
                    imageId, response.getId());
            return ResponseEntity.ok(response);
        } else {
            log.warn("‚ùå An√°lise n√£o encontrada para imagem: {}", imageId);
            return ResponseEntity.notFound().build();
        }
    }

    @Operation(summary = "üìã Listar todas as an√°lises",
            description = "Retorna uma lista paginada de todas as an√°lises com filtros opcionais")
    @SuccessResponse(AnalysisListResponse.class)
    @GetMapping
    public ResponseEntity<AnalysisListResponse> getAllAnalyses(
            @Parameter(description = "N√∫mero da p√°gina (0-based)", example = "0")
            @RequestParam(defaultValue = ApiConstants.DEFAULT_PAGE)
            @Min(0) int page,

            @Parameter(description = "Tamanho da p√°gina", example = "20")
            @RequestParam(defaultValue = ApiConstants.DEFAULT_SIZE)
            @Min(1) @Max(100) int size,

            @Parameter(description = "Filtrar por status", example = "COMPLETED")
            @RequestParam(required = false) String status) {

        log.info("üìã Listando an√°lises - P√°gina: {}, Tamanho: {}, Status: {}", page, size, status);

        List<ImageAnalysis> analyses = queryUseCase.findAll();

        // Aplicar filtro de status se fornecido
        if (status != null && !status.trim().isEmpty()) {
            try {
                AnalysisStatus statusEnum = AnalysisStatus.valueOf(status.toUpperCase());
                analyses = analyses.stream()
                        .filter(analysis -> analysis.getStatus() == statusEnum)
                        .collect(Collectors.toList());
            } catch (IllegalArgumentException e) {
                log.warn("Status inv√°lido fornecido: {}", status);
                throw new IllegalArgumentException("Status inv√°lido: " + status);
            }
        }

        // Simular pagina√ß√£o (em um cen√°rio real, seria feito no reposit√≥rio)
        int start = page * size;
        int end = Math.min(start + size, analyses.size());
        List<ImageAnalysis> paginatedAnalyses = analyses.subList(
                Math.min(start, analyses.size()),
                Math.min(end, analyses.size())
        );

        List<ImageAnalysisResponse> responseList = responseMapper.toResponseList(paginatedAnalyses);

        AnalysisListResponse response = AnalysisListResponse.builder()
                .analyses(responseList)
                .totalCount(analyses.size())
                .page(page)
                .size(size)
                .hasNext(end < analyses.size())
                .hasPrevious(page > 0)
                .build();

        log.info("‚úÖ Retornando {} an√°lises (p√°gina {}/{})",
                responseList.size(), page + 1, (analyses.size() + size - 1) / size);

        return ResponseEntity.ok(response);
    }

    @Operation(summary = "üìä Obter estat√≠sticas das an√°lises",
            description = "Retorna estat√≠sticas agregadas das an√°lises realizadas (cache de 5 minutos)")
    @SuccessResponse(AnalysisStatsResponse.class)
    @GetMapping("/stats")
    @Cacheable(value = ApiConstants.CACHE_ANALYSIS_STATS, unless = "#result == null")
    public ResponseEntity<AnalysisStatsResponse> getAnalysisStats() {
        log.info("üìä Gerando estat√≠sticas das an√°lises");

        try {
            AnalysisStatsResponse stats = queryUseCase.getAnalysisStatistics();
            log.info("‚úÖ Estat√≠sticas geradas: {} an√°lises totais, {} hoje",
                    stats.getTotalAnalyses(), stats.getTodayAnalyses());
            return ResponseEntity.ok(stats);

        } catch (Exception e) {
            log.error("‚ùå Erro ao gerar estat√≠sticas", e);
            throw e;
        }
    }

    @Operation(summary = "üíö Verificar status de sa√∫de",
            description = "Endpoint para verifica√ß√£o de sa√∫de do servi√ßo de an√°lise")
    @ApiResponse(responseCode = "200", description = "Servi√ßo funcionando normalmente")
    @ApiResponse(responseCode = "503", description = "Servi√ßo indispon√≠vel")
    @GetMapping("/health")
    public ResponseEntity<String> healthCheck() {
        log.debug("üíö Health check do servi√ßo de an√°lise");

        try {
            // Verificar se o servi√ßo est√° funcionando
            long analysisCount = queryUseCase.findAll().size();

            String healthMessage = String.format(
                    "üõ∞Ô∏è Analysis Service is healthy! Total analyses: %d - Timestamp: %s",
                    analysisCount,
                    LocalDateTime.now()
            );

            return ResponseEntity.ok(healthMessage);

        } catch (Exception e) {
            log.error("‚ùå Health check failed", e);
            return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE)
                    .body("‚ùå Analysis Service is unhealthy: " + e.getMessage());
        }
    }

    // M√©todos de valida√ß√£o
    private void validateId(String id) {
        if (id == null || id.trim().isEmpty()) {
            throw new IllegalArgumentException("ID n√£o pode ser vazio");
        }

        if (id.length() > 100) {
            throw new IllegalArgumentException("ID muito longo (m√°ximo 100 caracteres)");
        }
    }

    // Exception Handlers
    @ExceptionHandler(ImageNotFoundException.class)
    public ResponseEntity<ErrorResponse> handleImageNotFound(
            ImageNotFoundException ex,
            HttpServletRequest request) {

        log.warn("‚ùå Imagem n√£o encontrada: {}", ex.getMessage());

        ErrorResponse error = ErrorResponse.builder()
                .error(ApiConstants.ERROR_IMAGE_NOT_FOUND)
                .message(ex.getMessage())
                .path(request.getRequestURI())
                .timestamp(LocalDateTime.now())
                .status(HttpStatus.NOT_FOUND.value())
                .build();

        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(error);
    }

    @ExceptionHandler(ImageAnalysisException.class)
    public ResponseEntity<ErrorResponse> handleImageAnalysisException(
            ImageAnalysisException ex,
            HttpServletRequest request) {

        log.error("‚ùå Erro de an√°lise: {}", ex.getMessage());

        ErrorResponse error = ErrorResponse.builder()
                .error("ANALYSIS_ERROR")
                .message(ex.getMessage())
                .path(request.getRequestURI())
                .timestamp(LocalDateTime.now())
                .status(HttpStatus.INTERNAL_SERVER_ERROR.value())
                .build();

        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);
    }

    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<ErrorResponse> handleIllegalArgument(
            IllegalArgumentException ex,
            HttpServletRequest request) {

        log.warn("‚ùå Argumento inv√°lido: {}", ex.getMessage());

        ErrorResponse error = ErrorResponse.builder()
                .error(ApiConstants.ERROR_INVALID_REQUEST)
                .message(ex.getMessage())
                .path(request.getRequestURI())
                .timestamp(LocalDateTime.now())
                .status(HttpStatus.BAD_REQUEST.value())
                .build();

        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(error);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleGenericException(
            Exception ex,
            HttpServletRequest request) {

        log.error("‚ùå Erro interno: {}", ex.getMessage(), ex);

        ErrorResponse error = ErrorResponse.builder()
                .error(ApiConstants.ERROR_INTERNAL_SERVER)
                .message("Erro interno do servidor")
                .path(request.getRequestURI())
                .timestamp(LocalDateTime.now())
                .status(HttpStatus.INTERNAL_SERVER_ERROR.value())
                .build();

        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);
    }
}